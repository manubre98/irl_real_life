for(j in 163:length(all_files)){
l= all_files[j]
print(l)
# read in file
setwd("~/Desktop/ResOpsUS/time_series_all")
data <- read.csv(file = l, stringsAsFactors = FALSE)
dam_id1 <- gsub("ResOpsUS_", "", l)
dam_id<- gsub(".csv", "", dam_id1)
# check if storage/ elevation exist and if not then move to the next fiel
stor_sum <- sum(data$storage, na.rm = TRUE)
ele_sum <- sum(data$elevation, na.rm = TRUE)
if( stor_sum == 0 |ele_sum == 0){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
# graph the storage vs elevation chart and save for daily data
stor_ele_plot_title <- paste0(dam_id, "Storage vs Elevation Daily")
stor_ele_plot <- ggplot(data, mapping = aes(x = storage, y = elevation, color= year(date)))+
geom_point()+
ggtitle(stor_ele_plot_title)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
file_name_plot <- paste0(stor_ele_plot_title, ".jpeg")
ggsave(filename = file_name_plot, stor_ele_plot)
# calculate r^2
linear_fit <- lm(storage ~ elevation, data = data)
r_squared_daily <- summary(linear_fit)$r.squared
#### Repeat Above with Water Year Data ######
years <- unique(year(data$date))
if (length(years) == 2){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
water_year <- matrix(data = NA, ncol = 3, nrow = length(years))
for (o in 2:length(years)){
#print(o)
current_year <- years[o]
past_year <- current_year -1
start_index <- which(year(data$date) ==past_year & month(data$date) == 10 & day (data$date) ==1)
last_index <- which(year(data$date) ==current_year & month(data$date) == 9 & day(data$date) == 30)
if (length(start_index) == 0 | length(last_index) ==0){
next
}
water_year_matrix <- data[start_index:last_index,]
water_year_matrix$date <- NA
stor <- mean(water_year_matrix$storage, na.rm = TRUE)
ele <- mean(water_year_matrix$elevation, na.rm = TRUE)
water_year[o,1] <- current_year
water_year[o,2] <- stor
water_year[o,3] <- ele
}
colnames(water_year) <- c("year", "storage", "elevation")
water_year_graphing <- as.data.frame(water_year, stringsAsFactors = FALSE)
# graph the storage vs elevation chart and save for water year data
stor_ele_plot_title2 <- paste0(dam_id, "Storage vs Elevation Yearly")
stor_ele_plot2 <- ggplot(water_year_graphing, mapping = aes(x = storage, y = elevation, color = year))+
geom_point()+
ggtitle(stor_ele_plot_title2)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
file_name_plot <- paste0(stor_ele_plot_title2, ".jpeg")
ggsave(filename = file_name_plot, stor_ele_plot2)
# calculate r^2
linear_fit2 <- lm(storage ~ elevation, data = water_year_graphing)
r_squared_wy <- summary(linear_fit2)$r.squared
# plug in r^2 to table
r_squared_table[index,1]<- dam_id
r_squared_table[index,2] <- r_squared_daily
r_squared_table[index,3] <- r_squared_wy
index = index +1
}# (l in all_files)
j
View(water_year_matrix)
View(water_year_graphing)
ggplot(data, mapping = aes(x = storage, y = elevation, color= year(date)))+
geom_point()+
ggtitle(stor_ele_plot_title)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
for(j in 238:length(all_files)){
l= all_files[j]
print(l)
# read in file
setwd("~/Desktop/ResOpsUS/time_series_all")
data <- read.csv(file = l, stringsAsFactors = FALSE)
dam_id1 <- gsub("ResOpsUS_", "", l)
dam_id<- gsub(".csv", "", dam_id1)
# check if storage/ elevation exist and if not then move to the next fiel
stor_sum <- sum(data$storage, na.rm = TRUE)
ele_sum <- sum(data$elevation, na.rm = TRUE)
if( stor_sum == 0 |ele_sum == 0 | lj == 238){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
# graph the storage vs elevation chart and save for daily data
stor_ele_plot_title <- paste0(dam_id, "Storage vs Elevation Daily")
stor_ele_plot <- ggplot(data, mapping = aes(x = storage, y = elevation, color= year(date)))+
geom_point()+
ggtitle(stor_ele_plot_title)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
file_name_plot <- paste0(stor_ele_plot_title, ".jpeg")
ggsave(filename = file_name_plot, stor_ele_plot)
# calculate r^2
linear_fit <- lm(storage ~ elevation, data = data)
r_squared_daily <- summary(linear_fit)$r.squared
#### Repeat Above with Water Year Data ######
years <- unique(year(data$date))
if (length(years) == 2){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
water_year <- matrix(data = NA, ncol = 3, nrow = length(years))
for (o in 2:length(years)){
#print(o)
current_year <- years[o]
past_year <- current_year -1
start_index <- which(year(data$date) ==past_year & month(data$date) == 10 & day (data$date) ==1)
last_index <- which(year(data$date) ==current_year & month(data$date) == 9 & day(data$date) == 30)
if (length(start_index) == 0 | length(last_index) ==0){
next
}
water_year_matrix <- data[start_index:last_index,]
water_year_matrix$date <- NA
stor <- mean(water_year_matrix$storage, na.rm = TRUE)
ele <- mean(water_year_matrix$elevation, na.rm = TRUE)
water_year[o,1] <- current_year
water_year[o,2] <- stor
water_year[o,3] <- ele
}
colnames(water_year) <- c("year", "storage", "elevation")
water_year_graphing <- as.data.frame(water_year, stringsAsFactors = FALSE)
# graph the storage vs elevation chart and save for water year data
stor_ele_plot_title2 <- paste0(dam_id, "Storage vs Elevation Yearly")
stor_ele_plot2 <- ggplot(water_year_graphing, mapping = aes(x = storage, y = elevation, color = year))+
geom_point()+
ggtitle(stor_ele_plot_title2)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
file_name_plot <- paste0(stor_ele_plot_title2, ".jpeg")
ggsave(filename = file_name_plot, stor_ele_plot2)
# calculate r^2
linear_fit2 <- lm(storage ~ elevation, data = water_year_graphing)
r_squared_wy <- summary(linear_fit2)$r.squared
# plug in r^2 to table
r_squared_table[index,1]<- dam_id
r_squared_table[index,2] <- r_squared_daily
r_squared_table[index,3] <- r_squared_wy
index = index +1
}# (l in all_files)
l
j
for(j in 238:length(all_files)){
l= all_files[j]
print(l)
# read in file
setwd("~/Desktop/ResOpsUS/time_series_all")
data <- read.csv(file = l, stringsAsFactors = FALSE)
dam_id1 <- gsub("ResOpsUS_", "", l)
dam_id<- gsub(".csv", "", dam_id1)
# check if storage/ elevation exist and if not then move to the next fiel
stor_sum <- sum(data$storage, na.rm = TRUE)
ele_sum <- sum(data$elevation, na.rm = TRUE)
if( stor_sum == 0 |ele_sum == 0 | lj == 238){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
# graph the storage vs elevation chart and save for daily data
stor_ele_plot_title <- paste0(dam_id, "Storage vs Elevation Daily")
stor_ele_plot <- ggplot(data, mapping = aes(x = storage, y = elevation, color= year(date)))+
geom_point()+
ggtitle(stor_ele_plot_title)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
file_name_plot <- paste0(stor_ele_plot_title, ".jpeg")
ggsave(filename = file_name_plot, stor_ele_plot)
# calculate r^2
linear_fit <- lm(storage ~ elevation, data = data)
r_squared_daily <- summary(linear_fit)$r.squared
#### Repeat Above with Water Year Data ######
years <- unique(year(data$date))
if (length(years) == 2){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
water_year <- matrix(data = NA, ncol = 3, nrow = length(years))
for (o in 2:length(years)){
#print(o)
current_year <- years[o]
past_year <- current_year -1
start_index <- which(year(data$date) ==past_year & month(data$date) == 10 & day (data$date) ==1)
last_index <- which(year(data$date) ==current_year & month(data$date) == 9 & day(data$date) == 30)
if (length(start_index) == 0 | length(last_index) ==0){
next
}
water_year_matrix <- data[start_index:last_index,]
water_year_matrix$date <- NA
stor <- mean(water_year_matrix$storage, na.rm = TRUE)
ele <- mean(water_year_matrix$elevation, na.rm = TRUE)
water_year[o,1] <- current_year
water_year[o,2] <- stor
water_year[o,3] <- ele
}
colnames(water_year) <- c("year", "storage", "elevation")
water_year_graphing <- as.data.frame(water_year, stringsAsFactors = FALSE)
# graph the storage vs elevation chart and save for water year data
stor_ele_plot_title2 <- paste0(dam_id, "Storage vs Elevation Yearly")
stor_ele_plot2 <- ggplot(water_year_graphing, mapping = aes(x = storage, y = elevation, color = year))+
geom_point()+
ggtitle(stor_ele_plot_title2)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
file_name_plot <- paste0(stor_ele_plot_title2, ".jpeg")
ggsave(filename = file_name_plot, stor_ele_plot2)
# calculate r^2
linear_fit2 <- lm(storage ~ elevation, data = water_year_graphing)
r_squared_wy <- summary(linear_fit2)$r.squared
# plug in r^2 to table
r_squared_table[index,1]<- dam_id
r_squared_table[index,2] <- r_squared_daily
r_squared_table[index,3] <- r_squared_wy
index = index +1
}# (l in all_files)
for(j in 238:length(all_files)){
l= all_files[j]
print(l)
# read in file
setwd("~/Desktop/ResOpsUS/time_series_all")
data <- read.csv(file = l, stringsAsFactors = FALSE)
dam_id1 <- gsub("ResOpsUS_", "", l)
dam_id<- gsub(".csv", "", dam_id1)
# check if storage/ elevation exist and if not then move to the next fiel
stor_sum <- sum(data$storage, na.rm = TRUE)
ele_sum <- sum(data$elevation, na.rm = TRUE)
if( stor_sum == 0 |ele_sum == 0 | j == 238){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
# graph the storage vs elevation chart and save for daily data
stor_ele_plot_title <- paste0(dam_id, "Storage vs Elevation Daily")
stor_ele_plot <- ggplot(data, mapping = aes(x = storage, y = elevation, color= year(date)))+
geom_point()+
ggtitle(stor_ele_plot_title)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
file_name_plot <- paste0(stor_ele_plot_title, ".jpeg")
ggsave(filename = file_name_plot, stor_ele_plot)
# calculate r^2
linear_fit <- lm(storage ~ elevation, data = data)
r_squared_daily <- summary(linear_fit)$r.squared
#### Repeat Above with Water Year Data ######
years <- unique(year(data$date))
if (length(years) == 2){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
water_year <- matrix(data = NA, ncol = 3, nrow = length(years))
for (o in 2:length(years)){
#print(o)
current_year <- years[o]
past_year <- current_year -1
start_index <- which(year(data$date) ==past_year & month(data$date) == 10 & day (data$date) ==1)
last_index <- which(year(data$date) ==current_year & month(data$date) == 9 & day(data$date) == 30)
if (length(start_index) == 0 | length(last_index) ==0){
next
}
water_year_matrix <- data[start_index:last_index,]
water_year_matrix$date <- NA
stor <- mean(water_year_matrix$storage, na.rm = TRUE)
ele <- mean(water_year_matrix$elevation, na.rm = TRUE)
water_year[o,1] <- current_year
water_year[o,2] <- stor
water_year[o,3] <- ele
}
colnames(water_year) <- c("year", "storage", "elevation")
water_year_graphing <- as.data.frame(water_year, stringsAsFactors = FALSE)
# graph the storage vs elevation chart and save for water year data
stor_ele_plot_title2 <- paste0(dam_id, "Storage vs Elevation Yearly")
stor_ele_plot2 <- ggplot(water_year_graphing, mapping = aes(x = storage, y = elevation, color = year))+
geom_point()+
ggtitle(stor_ele_plot_title2)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
file_name_plot <- paste0(stor_ele_plot_title2, ".jpeg")
ggsave(filename = file_name_plot, stor_ele_plot2)
# calculate r^2
linear_fit2 <- lm(storage ~ elevation, data = water_year_graphing)
r_squared_wy <- summary(linear_fit2)$r.squared
# plug in r^2 to table
r_squared_table[index,1]<- dam_id
r_squared_table[index,2] <- r_squared_daily
r_squared_table[index,3] <- r_squared_wy
index = index +1
}# (l in all_files)
l
j
length(all_Files)
length(all_files())
length(all_files
)
l= all_files[j]
print(l)
# read in file
setwd("~/Desktop/ResOpsUS/time_series_all")
data <- read.csv(file = l, stringsAsFactors = FALSE)
dam_id1 <- gsub("ResOpsUS_", "", l)
dam_id<- gsub(".csv", "", dam_id1)
# check if storage/ elevation exist and if not then move to the next fiel
stor_sum <- sum(data$storage, na.rm = TRUE)
ele_sum <- sum(data$elevation, na.rm = TRUE)
stor_sum
ele_sum
ggplot(data, mapping = aes(x = storage, y = elevation, color= year(date)))+
geom_point()+
ggtitle(stor_ele_plot_title)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
index
r_squared_yearly
r_squared_wy
# save final file
colnames(r_squared_table) <- c("dam_id", "r_squared_daily", "r_squared_wy")
setwd("~/Desktop/Research/Storage_Elevation_Relationships")
write.csv(r_squared_table, file = "Storage_Elevation_R_Squared.csv", row.names = FALSE)
which(grepl("1027", all_files) == TRUE)
j = 20
l= all_files[j]
print(l)
# read in file
setwd("~/Desktop/ResOpsUS/time_series_all")
data <- read.csv(file = l, stringsAsFactors = FALSE)
dam_id1 <- gsub("ResOpsUS_", "", l)
dam_id<- gsub(".csv", "", dam_id1)
# check if storage/ elevation exist and if not then move to the next fiel
stor_sum <- sum(data$storage, na.rm = TRUE)
ele_sum <- sum(data$elevation, na.rm = TRUE)
if( stor_sum == 0 |ele_sum == 0 | j == 238){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
ggplot(data, mapping = aes(x = storage, y = elevation, color= year(date)))+
geom_point()+
ggtitle(stor_ele_plot_title)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
max(data$storage)
max(data$storage, na.rm = TRUE)
mean(data$storage, na.rm = TRUE)
mean(elevation, na.rm = TRUE)
mean(data$elevation, na.rm = TRUE)
max(data$elevation, na.rm = TRUE)
min(data$elevation, na.rm = TRUE
)
View(data)
)
which(grepl("1027", all_files) == TRUE)
which(grepl("500", all_files) == TRUE)
j=482
l= all_files[j]
print(l)
# read in file
setwd("~/Desktop/ResOpsUS/time_series_all")
data <- read.csv(file = l, stringsAsFactors = FALSE)
dam_id1 <- gsub("ResOpsUS_", "", l)
dam_id<- gsub(".csv", "", dam_id1)
# check if storage/ elevation exist and if not then move to the next fiel
stor_sum <- sum(data$storage, na.rm = TRUE)
ele_sum <- sum(data$elevation, na.rm = TRUE)
if( stor_sum == 0 |ele_sum == 0 | j == 238){
r_squared_table[index,1]<- dam_id
index = index+1
next
}
mean(data$elevation, na.rm = TRUE)
mean(data$storage, na.rm = TRUE
)
max(dat$elevation,na.rm = TRUE)
max(data$elevation,na.rm = TRUE)
max(data$storage,na.rm = TRUE)
min(data$elevation, na.rm = TRUE)
min(data$storage, na.rm = TRUE)
ggplot(data, mapping = aes(x = storage, y = elevation, color= year(date)))+
geom_point()+
ggtitle(stor_ele_plot_title)+
xlab("Storage (MCM)")+
ylab("Elevation (m)")+
theme_classic()
library(readr)
library(tidyverse)
library(lubridate)
library(reshape)
library(ggplot2)
library(Hmisc)
library(zoo)
library(dplyr)
library(gridExtra)
library(RColorBrewer)
# read in dams matched to HUC2
setwd("~/Desktop/Research/Percentage_Area_Figure/")
HUC2 <- read_csv(file = "HUC2_CONUS_Res.csv")
HUC2$YEAR_CREATED[HUC2$YEAR_CREATED<1] <- NA
# read in SPI/ SPEI
setwd("~/Desktop/Datasets/NCAR_SPI_SPEI/")
SPEI <- read.csv(file ="SPEI_Water_Year_Avg_HUC2.csv", stringsAsFactors = FALSE)
SPI <- read.csv(file="SPI_Water_Year_Avg_HUC2.csv", stringsAsFactors = FALSE)
# Read in res_att
setwd("~/Desktop/ResOpsUS/attributes")
attributes<- read.csv(file = "reservoir_attributes.csv", stringsAsFactors = FALSE)
# merge HUC2 with the reservoir attribute data
huc2_res <- merge(attributes, HUC2[, c(1,13,29,49)], by = "DAM_ID")
huc2_list <- c(3,5,6,7,8,9,10,11,12,14,15,16,17,18) # list of the HUC2's that have more than 50% storage covered in the dataset
mycolors1 <- c('#413387', '#4F438E', '#3288BD', '#3952AA', '#3FBFD0','#2CD7B2', '#289E13', '#8ED437', '#D1EF77',
'#79CE6B', '#C0EF3E', '#FFF66F',
'#F46D43',  '#D53E4F', "#D64A5A",
'#9E0142', '#5BBB9D', '#FDAE61' )
m=1
# can't just get rid of dam if no data, if don't have data then can get rid of it but first need to check for max storage capacity
huc2 <- huc2_list[m] # pull out the huc2 number
all_dams <- HUC2 %>% filter(join_HUC2 ==huc2)
filtered_res_att <- huc2_res %>% filter(join_HUC2_db == huc2)# filter out all the dams that are in this huc2
dam_ids <- filtered_res_att$DAM_ID # all the dam ID's
###### Combine all storage records into one file (column names = dam name, row names = date) #####
for (l in 1:length(dam_ids)) { # loop through the dam_ids to pull all the data together
file_name <- paste0("ResOpsUS_",dam_ids[l], ".csv")
setwd("~/Desktop/ResOpsUS/time_series_all")
res_data <- read.csv(file = file_name, stringsAsFactors = FALSE)
colnames(res_data) <- c("date", paste0(dam_ids[l], "_value"), "inflow", "outflow", "elevation", "evaporation")
if(l ==1){
all_huc2 <- res_data[,1:2]
}else{
all_huc2 <- merge(all_huc2, res_data[,1:2], by = "date", all = TRUE)
}# (l ==1)
} # for (l in 1:length(dam_ids))
all_huc2[all_huc2 < 0] <- NA
#### Get Data Ready to Graph Storage Cap over time ######
all_years1 <- unique(sort(all_dams$YEAR_CREATED))
all_years <- seq(all_years1[1], 2021, by =1)
graphing_panel1 <- data.frame(all_years)
graphing_panel1$storage_cap_data <- NA
graphing_panel1$storage_cap_GRanD <- NA
graphing_color <- mycolors1[huc2]
p=1
dam_id <- as.numeric(all_dams[p, 1])
col_index <- which(grepl(dam_id, colnames(all_huc2)) == TRUE)
dam_id
col_index
all_dams
dam_id
View(all_huc2)
start_date_matrix<- as.data.frame(dam_ids)
start_date_matrix$start <- NA
for (j in 1:length(dam_ids)){
dam_id <- dam_ids[j] # pull out first dam_id
start_year <- filtered_res_att[j,11] # pull out the built year
column_index <- which(grepl(dam_id, colnames(all_huc2)) == TRUE)
# determines the first instance of number in dataset
counter =1
while (is.na(all_huc2[counter,column_index]) == TRUE && counter <= nrow(all_huc2)){
counter = counter +1 # counter will tell us what the row number is
}
date_start <- (all_huc2[counter, 1])
start_date_matrix[j,2] <- year(date_start)
inverse_counter =nrow(all_huc2)
while (is.na(all_huc2[inverse_counter,column_index]) == TRUE && inverse_counter >0){
inverse_counter = inverse_counter -1 # counter will tell us what the row number is
}
# find ending date
date_end <- (all_huc2[inverse_counter, 1])
if(is.na(date_start)== TRUE ){
percent_covered <- NA
}else{
total_number_records <- length(seq.Date(as.Date(date_start), as.Date(date_end), by = "day"))
non_na_records <- total_number_records - sum(is.na(all_huc2[counter:inverse_counter,column_index])) # sum gives the total number of NA
percentage_covered <- non_na_records/total_number_records*100
}
if (percentage_covered <50 && is.na(percentage_covered) == FALSE){ # if less than 50% record will be made NA and not interpolated
all_huc2[,column_index] <- NA
}#(percentage_covered <50)
}#  for (j in 1:length(dam_ids))
colnames(start_date_matrix) <- c("DAM_ID", "start")
View(all_dams)
View(filtered_res_att)
View(all_dams)
View(start_date_matrix)
